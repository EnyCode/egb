use embedded_graphics::{
    image::ImageRaw,
    mono_font::{
        ascii::FONT_6X9,
        mapping::{StrGlyphMapping, ASCII},
        DecorationDimensions, MonoFont, MonoTextStyle,
    },
    pixelcolor::{BinaryColor, Gray8},
    prelude::*,
    primitives::{Circle, Line, PrimitiveStyle, Rectangle},
    text::{Alignment, Baseline, Text, TextStyle, TextStyleBuilder},
};
use embedded_graphics_simulator::{
    BinaryColorTheme, OutputSettingsBuilder, SimulatorDisplay, Window,
};

#[rustfmt::skip]
const DATA: &[u8] = &[
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b01000000, 0b10100000, 0b10100000, 0b11100000, 0b10100000, 0b11000000, 0b01000000, 0b01000000, 0b01000000, 0b10100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 
    0b00000000, 0b01000000, 0b10100000, 0b11100000, 0b11000000, 0b00100000, 0b11000000, 0b10000000, 0b10000000, 0b00100000, 0b01000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b01000000, 
    0b00000000, 0b01000000, 0b00000000, 0b10100000, 0b01100000, 0b01000000, 0b11000000, 0b00000000, 0b10000000, 0b00100000, 0b11100000, 0b11100000, 0b00000000, 0b11100000, 0b00000000, 0b01000000, 
    0b00000000, 0b00000000, 0b00000000, 0b11100000, 0b11100000, 0b10000000, 0b10100000, 0b00000000, 0b10000000, 0b00100000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, 0b00000000, 0b01000000, 
    0b00000000, 0b01000000, 0b00000000, 0b10100000, 0b01000000, 0b10100000, 0b11100000, 0b00000000, 0b01000000, 0b01000000, 0b10100000, 0b00000000, 0b10000000, 0b00000000, 0b01000000, 0b10000000, 

    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b11100000, 0b11000000, 0b11100000, 0b11100000, 0b10100000, 0b11100000, 0b10000000, 0b11100000, 0b11100000, 0b11100000, 0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b10000000, 0b11100000, 
    0b10100000, 0b01000000, 0b00100000, 0b00100000, 0b10100000, 0b10000000, 0b10000000, 0b00100000, 0b10100000, 0b10100000, 0b01000000, 0b01000000, 0b01000000, 0b11100000, 0b01000000, 0b00100000, 
    0b10100000, 0b01000000, 0b11100000, 0b01100000, 0b11100000, 0b11100000, 0b11100000, 0b00100000, 0b11100000, 0b11100000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00100000, 0b01100000, 
    0b10100000, 0b01000000, 0b10000000, 0b00100000, 0b00100000, 0b00100000, 0b10100000, 0b00100000, 0b10100000, 0b00100000, 0b01000000, 0b01000000, 0b01000000, 0b11100000, 0b01000000, 0b00000000, 
    0b11100000, 0b11100000, 0b11100000, 0b11100000, 0b00100000, 0b11100000, 0b11100000, 0b00100000, 0b11100000, 0b00100000, 0b00000000, 0b10000000, 0b00100000, 0b00000000, 0b10000000, 0b01000000, 

    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b01000000, 0b11100000, 0b11100000, 0b01100000, 0b11000000, 0b11100000, 0b11100000, 0b01100000, 0b10100000, 0b11100000, 0b11100000, 0b10100000, 0b10000000, 0b11100000, 0b11000000, 0b01100000, 
    0b10100000, 0b10100000, 0b10100000, 0b10000000, 0b10100000, 0b10000000, 0b10000000, 0b10000000, 0b10100000, 0b01000000, 0b01000000, 0b10100000, 0b10000000, 0b11100000, 0b10100000, 0b10100000, 
    0b10100000, 0b11100000, 0b11000000, 0b10000000, 0b10100000, 0b11000000, 0b11000000, 0b10000000, 0b11100000, 0b01000000, 0b01000000, 0b11000000, 0b10000000, 0b10100000, 0b10100000, 0b10100000, 
    0b10000000, 0b10100000, 0b10100000, 0b10000000, 0b10100000, 0b10000000, 0b10000000, 0b10100000, 0b10100000, 0b01000000, 0b01000000, 0b10100000, 0b10000000, 0b10100000, 0b10100000, 0b10100000, 
    0b01100000, 0b10100000, 0b11100000, 0b01100000, 0b11100000, 0b11100000, 0b10000000, 0b11100000, 0b10100000, 0b11100000, 0b11000000, 0b10100000, 0b11100000, 0b10100000, 0b10100000, 0b11000000, 

    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b11100000, 0b01000000, 0b11100000, 0b01100000, 0b11100000, 0b10100000, 0b10100000, 0b10100000, 0b10100000, 0b10100000, 0b11100000, 0b11000000, 0b10000000, 0b01100000, 0b01000000, 0b00000000, 
    0b10100000, 0b10100000, 0b10100000, 0b10000000, 0b01000000, 0b10100000, 0b10100000, 0b10100000, 0b10100000, 0b10100000, 0b00100000, 0b10000000, 0b01000000, 0b00100000, 0b10100000, 0b00000000, 
    0b11100000, 0b10100000, 0b11000000, 0b11100000, 0b01000000, 0b10100000, 0b10100000, 0b10100000, 0b01000000, 0b11100000, 0b01000000, 0b10000000, 0b01000000, 0b00100000, 0b00000000, 0b00000000, 
    0b10000000, 0b11000000, 0b10100000, 0b00100000, 0b01000000, 0b10100000, 0b11100000, 0b11100000, 0b10100000, 0b00100000, 0b10000000, 0b10000000, 0b01000000, 0b00100000, 0b00000000, 0b00000000, 
    0b10000000, 0b01100000, 0b10100000, 0b11000000, 0b01000000, 0b01100000, 0b01000000, 0b11100000, 0b10100000, 0b11100000, 0b11100000, 0b11000000, 0b00100000, 0b01100000, 0b00000000, 0b11100000, 

    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00100000, 0b11100000, 0b11000000, 0b11100000, 0b11000000, 0b11100000, 0b11100000, 0b11100000, 0b10100000, 0b11100000, 0b11100000, 0b10100000, 0b10000000, 0b11100000, 0b11000000, 0b01100000, 
    0b00000000, 0b10100000, 0b11000000, 0b10000000, 0b10100000, 0b11000000, 0b11000000, 0b10000000, 0b10100000, 0b01000000, 0b01000000, 0b11000000, 0b10000000, 0b11100000, 0b10100000, 0b10100000, 
    0b00000000, 0b11100000, 0b10100000, 0b10000000, 0b10100000, 0b10000000, 0b10000000, 0b10100000, 0b11100000, 0b01000000, 0b01000000, 0b10100000, 0b10000000, 0b10100000, 0b10100000, 0b10100000, 
    0b00000000, 0b10100000, 0b11100000, 0b11100000, 0b11000000, 0b11100000, 0b10000000, 0b11100000, 0b10100000, 0b11100000, 0b11000000, 0b10100000, 0b11100000, 0b10100000, 0b10100000, 0b11000000, 

    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01100000, 0b01000000, 0b11000000, 0b00000000, 0b00000000, 
    0b11100000, 0b01000000, 0b11100000, 0b01100000, 0b11100000, 0b10100000, 0b10100000, 0b10100000, 0b10100000, 0b10100000, 0b11100000, 0b01000000, 0b01000000, 0b01000000, 0b00100000, 0b01000000, 
    0b10100000, 0b10100000, 0b10100000, 0b10000000, 0b01000000, 0b10100000, 0b10100000, 0b10100000, 0b01000000, 0b11100000, 0b00100000, 0b11000000, 0b01000000, 0b01100000, 0b11100000, 0b10100000, 
    0b11100000, 0b11000000, 0b11000000, 0b00100000, 0b01000000, 0b10100000, 0b11100000, 0b11100000, 0b10100000, 0b00100000, 0b10000000, 0b01000000, 0b01000000, 0b01000000, 0b10000000, 0b10100000, 
    0b10000000, 0b01100000, 0b10100000, 0b11000000, 0b01000000, 0b01100000, 0b01000000, 0b11100000, 0b10100000, 0b11100000, 0b11100000, 0b01100000, 0b01000000, 0b11000000, 0b00000000, 0b11100000, 

    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b11111110, 0b10101010, 0b10000000, 0b01111100, 0b10001000, 0b00100000, 0b00111000, 0b01011100, 0b00000000, 0b00111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b11111110, 0b01010100, 0b11111110, 0b11000110, 0b00100010, 0b00111100, 0b01110100, 0b01111100, 0b00000000, 0b01101100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b11111110, 0b10101010, 0b10111010, 0b11000110, 0b10001000, 0b00111000, 0b01111100, 0b01111100, 0b00000000, 0b11101110, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b11111110, 0b01010100, 0b10111010, 0b11101110, 0b00100010, 0b01111000, 0b01111100, 0b00111000, 0b00000000, 0b01101100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b11111110, 0b10101010, 0b01111100, 0b01111100, 0b10001000, 0b00001000, 0b00111000, 0b00010000, 0b00000000, 0b00111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 

    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
];

const PICO_FONT: MonoFont = MonoFont {
    image: ImageRaw::new(DATA, 128),
    glyph_mapping: &ASCII,
    character_size: Size::new(8, 6),
    character_spacing: 0,
    baseline: 0,
    underline: DecorationDimensions::default_underline(6),
    strikethrough: DecorationDimensions::default_strikethrough(3),
};

fn main() -> Result<(), core::convert::Infallible> {
    let mut display = SimulatorDisplay::<BinaryColor>::new(Size::new(240, 160));

    let character_style = MonoTextStyle::new(&PICO_FONT, BinaryColor::On);
    let text_style = TextStyleBuilder::new()
        .baseline(Baseline::Alphabetic)
        .alignment(Alignment::Left)
        .build();

    Text::with_text_style(
        " !\"#$%&'()*+,-./\n0123456789:;<=>?\n@ABCDEFGHIJKLMNO\nPQRSTUVWXYZ[\\]^_\n`abcdefghijklmno\npqrstuvwxyz{|}~\u{7F}\n",
        display.bounding_box().top_left,
        character_style,
        text_style,
    )
    .draw(&mut display)?;

    let output_settings = OutputSettingsBuilder::new()
        .theme(BinaryColorTheme::Default)
        .pixel_spacing(0)
        .build();

    Window::new("Eny's GameBoy", &output_settings).show_static(&display);

    Ok(())
}
